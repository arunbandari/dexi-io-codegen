package io.dexi.client.controllers;

import io.dexi.client.*;
import io.dexi.client.models.*;
import java.util.Collections;
import java.util.HashMap;
import java.util.UUID;

public class {{controller.className}} extends DexiAbstractController {

    public {{controller.className}}(Dexi dexi, String accountId, String accessToken) {
        super(dexi, accountId, accessToken);
    }

    {{#each controller.methods}}
    /**
     * {{type}} request to {{path}}.
     *
     * {{description}}
     *
     * Arguments:
    {{#each parameters}}
     *     {{name}} ({{#if format}}{{format}}|{{/if}}{{type}}): {{description}}
    {{/each}}
     *
     **/
    public {{#if responseModel.className}}{{responseModel.className}}{{else}}void{{/if}} {{name}}({{#each parameters}}{{className}} {{name}}{{#unless @last}}, {{/unless}}{{/each}}) throws DexiAPIException {
        final HashMap<String, Object> pathParams = new HashMap<>();
        final HashMap<String, Object> queryParams = new HashMap<>();
{{#each parameters}}
    {{#equal in "path"}}
        pathParams.put("{{name}}", {{name}});
    {{/equal}}
    {{#equal in "query"}}
        {{#unless required}}if ({{name}} != null) { {{/unless}}
            queryParams.put("{{name}}",{{name}});{{#unless required}}
        } {{/unless}}
    {{/equal}}
    {{#equal in "body"}}
        byte[] requestBody = serialize({{name}});
    {{/equal}}
{{/each}}
        String url = makeUrl("/{{path}}", pathParams, queryParams);
        {{#if responseModel.className}}DexiAPIResponse response = {{/if}}api.sendRequest(url, DexiAPIHelper.HTTPMethod.{{type}}, {{#if hasBody}}requestBody{{else}}null{{/if}}, Collections.EMPTY_MAP);

        {{#if responseModel.className}}
            {{#if responseModel.isBinary}}
        return new DexiBinaryResponse(response);
            {{else}}
        return deserialize(response.getResponseBody(), {{responseModel.className}}.class);
            {{/if}}

        {{/if}}
    }
    {{/each}}

}
