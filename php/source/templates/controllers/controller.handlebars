<?php
require_once '../DexiAbstractController.php';
require_once '../DexiAPIException.php';

class {{controller.className}} extends DexiAbstractController {

    public function __construct($accountId, $accessToken) {
        parent::__construct($accountId, $accessToken);
    }

    {{#each controller.methods}}
    /**
     * {{type}} request to {{path}}.
     *
     * {{description}}
     *
    {{#each parameters}}
     * @param ${{name}} ({{#if format}}{{format}}|{{/if}}{{type}}) {{description}}{{#unless @last}}
{{/unless}}{{/each}}{{#if responseModel.className}}
     * @return {{responseModel.className}}{{else}}{{/if}}
     * @throws DexiAPIException
     *
     **/
    public function {{name}}({{#if hasBody}}$body, {{/if}}{{#each parameters}}${{name}}{{#unless @last}}, {{/unless}}{{/each}})  {
        $url = '/{{path}}';
        $params = (object) array();
        {{#each parameters}}
        $params['{{name}}'] = ${{name}};
        {{/each}}
        $url = $this->processParameters($url, $params);

        {{#equal type 'GET'}}
        {{#if responseModel.className}}return {{/if}}$this->requestGet($url);
        {{/equal}}
        {{#equal type 'POST'}}
        {{#if hasBody}}
        {{#if responseModel.className}}return {{/if}}$this->requestPost($url, $body);
        {{else}}
        {{#if responseModel.className}}return {{/if}}$this->requestPost($url);
        {{/if}}
        {{/equal}}
        {{#equal type 'PUT'}}
        {{#if hasBody}}
        {{#if responseModel.className}}return {{/if}}$this->requestPut($url, $body);
        {{else}}
        {{#if responseModel.className}}return {{/if}}$this->requestPut($url, null);
        {{/if}}
        {{/equal}}
        {{#equal type 'DELETE'}}
        {{#if responseModel.className}}return {{/if}}apiHelper.delete($url);
        {{/equal}}
    }
    {{/each}}

}
